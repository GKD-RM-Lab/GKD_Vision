cmake_minimum_required(VERSION 3.15)
project(GKD_Vision LANGUAGES CXX)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)


# ==============================================================
# 0. Âü∫Á°ÄËÆæÁΩÆ
# ==============================================================
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_BUILD_TYPE Release)
add_compile_options(-O3 -w)

message(STATUS "===============================================")
message(STATUS "üöÄ Building project: ${PROJECT_NAME}")
message(STATUS "===============================================")

# ==============================================================
# 1. OpenCV
# ==============================================================
find_package(OpenCV REQUIRED)
if(NOT OpenCV_FOUND)
    message(FATAL_ERROR "‚ùå Êú™ÊâæÂà∞ OpenCVÔºåËØ∑ÂÖàÂÆâË£Ö OpenCVÔºÅ")
endif()
message(STATUS "‚úÖ Using OpenCV version: ${OpenCV_VERSION}")

# ==============================================================
# 2. OpenVINO
# ==============================================================
set(OpenVINODeveloperPackage_DIR "/usr/lib/cmake/openvino2024.6.0")
find_package(OpenVINO REQUIRED)
message(STATUS "‚úÖ Using OpenVINO version: ${openvino_VERSION}")

# ==============================================================
# 3. Eigen3
# ==============================================================
find_package(Eigen3 REQUIRED)
if(EIGEN3_FOUND)
    include_directories(${EIGEN3_INCLUDE_DIRS})
else()
    include_directories(/usr/include/eigen3)
endif()

# ==============================================================
# 4. Êµ∑Â∫∑Áõ∏Êú∫ SDK
# ==============================================================
set(CAMERA_LIB_DIR "${CMAKE_SOURCE_DIR}/lib/64")
link_directories(${CAMERA_LIB_DIR})

# ==============================================================
# 5. ÂåÖÂê´Â§¥Êñá‰ª∂ÁõÆÂΩï
# ==============================================================
include_directories(
    ${CMAKE_SOURCE_DIR}/include              # È°πÁõÆÂÖ¨ÂÖ±Â§¥Êñá‰ª∂
    ${CMAKE_SOURCE_DIR}/lib/include          # Á¨¨‰∏âÊñπÂ∫ìÂ§¥Êñá‰ª∂
    ${CMAKE_SOURCE_DIR}/lib/nlohmann         # JSON Â∫ìÂ§¥Êñá‰ª∂
    ${CMAKE_SOURCE_DIR}/lib                  # Â¶ÇÊúâÁõ¥Êé•ÊîæÂú® lib ‰∏ãÁöÑÂ§¥Êñá‰ª∂
    ${OpenCV_INCLUDE_DIRS}                   # OpenCV Â§¥Êñá‰ª∂
    # ${OpenVINO_INCLUDE_DIRS}               # ÈÄöÂ∏∏ find_package(OpenVINO) Â∑≤ÁªèÂ§ÑÁêÜ
)

# ==============================================================
# 6. Ê∫êÊñá‰ª∂
# ==============================================================
file(GLOB_RECURSE SOURCE_FILES ${CMAKE_SOURCE_DIR}/src/*.cpp)
set(MAIN_FILE ${CMAKE_SOURCE_DIR}/main.cpp)

# ==============================================================
# 7. ÁîüÊàêÂèØÊâßË°åÊñá‰ª∂
# ==============================================================
add_executable(GKD_Vision ${MAIN_FILE} ${SOURCE_FILES})

# ==============================================================
# 8. ÈìæÊé•‰æùËµñÂ∫ì
# ==============================================================
target_link_libraries(GKD_Vision
    ${OpenCV_LIBS}
    openvino::runtime

    # Êµ∑Â∫∑Áõ∏Êú∫È©±Âä®Áõ∏ÂÖ≥Â∫ì
    MvCameraControl
    MVGigEVisionSDK
    FormatConversion
    GCBase_gcc421_v3_0
    GenApi_gcc421_v3_0
    Log_gcc421_v3_0
    MediaProcess
    MVRender
    MvUsb3vTL
    NodeMapData_gcc421_v3_0
    XmlParser_gcc421_v3_0

    pthread
    X11
)

# ==============================================================
# 9. RPATH ËÆæÁΩÆÔºàËøêË°åÊó∂ËÉΩÊâæÂà∞ lib/64Ôºâ
# ==============================================================
set_target_properties(GKD_Vision PROPERTIES
    BUILD_RPATH "${CMAKE_SOURCE_DIR}/lib/64"
    INSTALL_RPATH "\$ORIGIN/../lib/64"
)

# ==============================================================
# 10. ÂÖµÁßçÂÆèÂÆö‰πâ
# ==============================================================
set(ARMY "infantry" CACHE STRING "Robot type: infantry/hero/sentry_l/sentry_r/balance/dronse")
if(ARMY STREQUAL "infantry")
    target_compile_definitions(GKD_Vision PRIVATE TJURM_INFANTRY)
elseif(ARMY STREQUAL "hero")
    target_compile_definitions(GKD_Vision PRIVATE TJURM_HERO)
elseif(ARMY STREQUAL "sentry_l" OR ARMY STREQUAL "sentry_r")
    target_compile_definitions(GKD_Vision PRIVATE TJURM_SENTRY)
elseif(ARMY STREQUAL "balance")
    target_compile_definitions(GKD_Vision PRIVATE TJURM_BALANCE)
elseif(ARMY STREQUAL "dronse")
    target_compile_definitions(GKD_Vision PRIVATE TJURM_DRONSE)
endif()

message(STATUS "‚úÖ Current army type: ${ARMY}")
message(STATUS "===============================================")
message(STATUS "‚úÖ CMake configuration complete!")
message(STATUS "===============================================")
